import java.util.*;
public class Main
{
    static int plaintext[]=new int[8];
    public static void main(String args[])
    {
        Scanner input=new Scanner(System.in);
        System.out.println("-----21BCT0427-----RAMYA S-----");
        System.out.print("Enter 10 bit key = ");
        int key[]=new int[10];
        for(int i=0;i<10;i++)
        {
            key[i]=input.nextInt();
        }
        System.out.print("Enter 8 bit plain text = ");
        
        for(int i=0;i<8;i++)
        {
            plaintext[i]=input.nextInt();
        }
        GenerateKey obj=new GenerateKey();
        int key1[]=obj.keygen(key,1);
        int key2[]=obj.keygen(key,2);
        System.out.print("Key 1 = ");
        for(int i=0;i<8;i++)
        {
            System.out.print(key1[i]+" ");
        }
        System.out.print("\nKey 2 = ");
        for(int i=0;i<8;i++)
        {
            System.out.print(key2[i]+" ");
        }
        System.out.println();
        System.out.println("\n-----ENCRYPTION-----\n");
        Encryption obj2=new Encryption();
        int ciphertxt[]=obj2.encrypt(plaintext,key1,key2);
        System.out.print("Ciphertext = ");
        for(int i=0;i<8;i++)
        {
            System.out.print(ciphertxt[i]+" ");
        }
        System.out.println("\n\n-----DECRYPTION-----\n");
        Decryption obj3=new Decryption();
        int plaintxt[]=obj3.decrypt(ciphertxt,key1,key2);
        System.out.print("Plaintext = ");
        for(int i=0;i<8;i++)
        {
            System.out.print(plaintxt[i]+" ");
        }
    }
}
class GenerateKey
{
    public static int[] keygen(int key[],int n)
    {
        int P10[]={3,5,2,7,4,10,1,9,8,6};
        int P8[]={6,3,7,4,8,5,10,9};
        int p10[]=new int[10];
        for(int i=0;i<10;i++)
        {
            p10[i]=key[P10[i]-1];
        }
        int part1[]=shift(p10,0,4);
        int part2[]=shift(part1,5,9);
        if(n==2)
        {
            int part3[]=shift(part2,0,4);
            int part4[]=shift(part3,5,9);
            int part5[]=shift(part2,0,4);
            int part6[]=shift(part3,5,9);
            for(int i=0;i<10;i++)
            {
                part2[i]=part6[i];
            }
        }
        int p8[]=new int[8];
        for(int i=0;i<8;i++)
        {
            p8[i]=part2[P8[i]-1];
        }
        return p8;
    }
    static int[] shift(int partition[],int x,int y)
    {
        int a=partition[x];
        for(int i=x;i<y;i++)
        {
            partition[i]=partition[i+1];
        }
        partition[y]=a;
        return partition;
    }
}
class Encryption
{
    public int[] encrypt(int plaintext[],int key1[],int key2[])
    {
        int IP[]={2,6,3,1,4,8,5,7};
        int EP[]={4,1,2,3,2,3,4,1};
        int S0[][]={{1,0,3,2},{3,2,1,0},{0,2,1,3},{3,1,3,2}};
        int S1[][]={{0,1,2,3},{2,0,1,3},{3,0,1,0},{2,1,0,3}};
        int P4[]={2,4,3,1};
        int IP_1[]={4,1,3,5,7,2,8,6};
        int ip[]=new int[8];
        int temp[]=new int[8];
        for(int i=0;i<8;i++)
        {
            ip[i]=plaintext[IP[i]-1];
            temp[i]=key1[i];
        }
        System.out.print("After Initial Permutation = ");
        for(int i=0;i<8;i++)
        {
            System.out.print(ip[i]+" ");
        }
        System.out.println();
        for(int i=0;i<2;i++)
        {
            int bit4[]=new int[4];
            int x=0;
            for(int j=4;j<=7;j++)
            {
                bit4[x]=ip[j];
                x++;
            }
            int ep[]=new int[8];
            for(int j=0;j<8;j++)
            {
                ep[j]=bit4[EP[j]-1];
            }
            System.out.print("\nRound "+(i+1)+": \n\nAfter Expanded Permutation = ");
            for(int j=0;j<8;j++)
        {
            System.out.print(ep[j]+" ");
        }
        System.out.println();
            int xor1[]=new int[8];
            for(int j=0;j<8;j++)
            {
                xor1[j]=xor(ep[j],temp[j]);
            }
            System.out.print("After xor operation with key "+i+1+" = ");
            for(int j=0;j<8;j++)
        {
            System.out.print(xor1[j]+" ");
        }
        System.out.println();
            int a=convert(xor1[0],xor1[3]);
            int b=convert(xor1[1],xor1[2]);
            int c=convert(xor1[4],xor1[7]);
            int d=convert(xor1[5],xor1[6]);
            int p=0;
            int ans4[]=new int[4];
            if(S0[a][b]==0)
            {
                ans4[p]=0;
                p++;
                ans4[p]=0;
                p++;
            }
            else if(S0[a][b]==1)
            {
                ans4[p]=0;
                p++;
                ans4[p]=1;
                p++;
            }
            else if(S0[a][b]==2)
            {
                ans4[p]=1;
                p++;
                ans4[p]=0;
                p++;
            }
            else{
                ans4[p]=1;
                p++;
                ans4[p]=1;
                p++;
            }
            if(S1[c][d]==0)
            {
                ans4[p]=0;
                p++;
                ans4[p]=0;
                p++;
            }
            else if(S1[c][d]==1)
            {
                ans4[p]=0;
                p++;
                ans4[p]=1;
                p++;
            }
            else if(S1[c][d]==2)
            {
                ans4[p]=1;
                p++;
                ans4[p]=0;
                p++;
            }
            else{
                ans4[p]=1;
                p++;
                ans4[p]=1;
                p++;
            }
            System.out.print("s0 and s1 = ");
            for(int j=0;j<4;j++)
        {
            System.out.print(ans4[j]+" ");
        }
        System.out.println();
            int p4[]=new int[4];
            for(int j=0;j<4;j++)
            {
                p4[j]=ans4[P4[j]-1];
            }
            int xor4[]=new int[4];
            for(int j=0;j<4;j++)
            {
                xor4[j]=xor(p4[j],ip[j]);
                ip[j]=xor4[j];
            }
            System.out.print("After xor operation with p4 = ");
            for(int j=0;j<4;j++)
        {
            System.out.print(xor4[j]+" ");
        }
        System.out.println();
            x=0;
            for(int j=4;j<8;j++)
            {
                ip[j]=bit4[x];
                x++;
            }
            System.out.print("After concatenation = ");
            for(int j=0;j<8;j++)
        {
            System.out.print(ip[j]+" ");
        }
        System.out.println();
            if(i==0)
            {
                int y=0;
                for(int j=0;j<8;j++)
                {
                    if(j<=3)
                    {
                        ip[j]=bit4[j];
                    }
                    else{
                        ip[j]=xor4[y];
                        y++;
                    }
                }
                System.out.print("\nAfter swapping = ");
                for(int j=0;j<8;j++)
        {
            System.out.print(ip[j]+" ");
        }
        System.out.println();
            }
            for(int j=0;j<8;j++)
            {
                temp[j]=key2[j];
            }
        }
        int ip_1[]=new int[8];
        for(int i=0;i<8;i++)
        {
            ip_1[i]=ip[IP_1[i]-1];
        }
        System.out.print("\nAfter Initial Permutation Inverse = ");
                for(int j=0;j<8;j++)
        {
            System.out.print(ip_1[j]+" ");
        }
        System.out.println("\n");
        return ip_1;
    }
    static int convert(int x,int y)
    {
        if(x==1 && y==1)
        {
            return 3;
        }
        else if(x==1 && y==0)
        {
            return 2;
        }
        else if(x==0 && y==1)
        {
            return 1;
        }
        else
        {
            return 0;
        }
    }
    static int xor(int x,int y)
    {
        if(x==1 && y==1)
        {
            return 0;
        }
        else if(x==1 && y==0)
        {
            return 1;
        }
        else if(x==0 && y==1)
        {
            return 1;
        }
        else
        {
            return 0;
        }
    }
}

class Decryption
{
    public int[] decrypt(int ciphertxt[],int key1[],int key2[])
    {
        int IP[]={2,6,3,1,4,8,5,7};
        int EP[]={4,1,2,3,2,3,4,1};
        int S0[][]={{1,0,3,2},{3,2,1,0},{0,2,1,3},{3,1,3,2}};
        int S1[][]={{0,1,2,3},{2,0,1,3},{3,0,1,0},{2,1,0,3}};
        int P4[]={2,4,3,1};
        int IP_1[]={4,1,3,5,7,2,8,6};
        int ip[]=new int[8];
        int temp[]=new int[8];
        for(int i=0;i<8;i++)
        {
            ip[i]=ciphertxt[IP[i]-1];
            temp[i]=key2[i];
        }
        System.out.print("After Initial Permutation = ");
        for(int i=0;i<8;i++)
        {
            System.out.print(ip[i]+" ");
        }
        System.out.println();
        for(int i=0;i<2;i++)
        {
            int bit4[]=new int[4];
            int x=0;
            for(int j=4;j<=7;j++)
            {
                bit4[x]=ip[j];
                x++;
            }
            int ep[]=new int[8];
            for(int j=0;j<8;j++)
            {
                ep[j]=bit4[EP[j]-1];
            }
            System.out.print("\nRound "+(1+i)+": \n\nAfter Expanded Permutation = ");
            for(int j=0;j<8;j++)
        {
            System.out.print(ep[j]+" ");
        }
        System.out.println();
            int xor1[]=new int[8];
            for(int j=0;j<8;j++)
            {
                xor1[j]=xor(ep[j],temp[j]);
            }
            System.out.print("After xor operation with key "+(1+i)+" = ");
            for(int j=0;j<8;j++)
        {
            System.out.print(xor1[j]+" ");
        }
        System.out.println();
            int a=convert(xor1[0],xor1[3]);
            int b=convert(xor1[1],xor1[2]);
            int c=convert(xor1[4],xor1[7]);
            int d=convert(xor1[5],xor1[6]);
            int p=0;
            int ans4[]=new int[4];
            if(S0[a][b]==0)
            {
                ans4[p]=0;
                p++;
                ans4[p]=0;
                p++;
            }
            else if(S0[a][b]==1)
            {
                ans4[p]=0;
                p++;
                ans4[p]=1;
                p++;
            }
            else if(S0[a][b]==2)
            {
                ans4[p]=1;
                p++;
                ans4[p]=0;
                p++;
            }
            else{
                ans4[p]=1;
                p++;
                ans4[p]=1;
                p++;
            }
            if(S1[c][d]==0)
            {
                ans4[p]=0;
                p++;
                ans4[p]=0;
                p++;
            }
            else if(S1[c][d]==1)
            {
                ans4[p]=0;
                p++;
                ans4[p]=1;
                p++;
            }
            else if(S1[c][d]==2)
            {
                ans4[p]=1;
                p++;
                ans4[p]=0;
                p++;
            }
            else{
                ans4[p]=1;
                p++;
                ans4[p]=1;
                p++;
            }
            System.out.print("s0 and s1 = ");
            for(int j=0;j<4;j++)
        {
            System.out.print(ans4[j]+" ");
        }
        System.out.println();
            int p4[]=new int[4];
            for(int j=0;j<4;j++)
            {
                p4[j]=ans4[P4[j]-1];
            }
            int xor4[]=new int[4];
            for(int j=0;j<4;j++)
            {
                xor4[j]=xor(p4[j],ip[j]);
                ip[j]=xor4[j];
            }
            System.out.print("After xor operation with p4 = ");
            for(int j=0;j<4;j++)
        {
            System.out.print(xor4[j]+" ");
        }
        System.out.println();
            x=0;
            for(int j=4;j<8;j++)
            {
                ip[j]=bit4[x];
                x++;
            }
            System.out.print("After concatenation = ");
            for(int j=0;j<8;j++)
        {
            System.out.print(ip[j]+" ");
        }
        System.out.println();
            if(i==0)
            {
                int y=0;
                for(int j=0;j<8;j++)
                {
                    if(j<=3)
                    {
                        ip[j]=bit4[j];
                    }
                    else{
                        ip[j]=xor4[y];
                        y++;
                    }
                }
                System.out.print("\nAfter swapping = ");
                for(int j=0;j<8;j++)
                {
                    System.out.print(ip[j]+" ");
                    temp[j]=key1[j];
                }
                System.out.println();
            }
        }
        int ip_1[]=new int[8];
        for(int i=0;i<8;i++)
        {
            ip_1[i]=ip[IP_1[i]-1];
        }
        System.out.print("\nAfter Initial Permutation Inverse = ");
                for(int j=0;j<8;j++)
        {
            System.out.print(ip_1[j]+" ");
        }
        System.out.println("\n");
        return ip_1;
    }
    static int convert(int x,int y)
    {
        if(x==1 && y==1)
        {
            return 3;
        }
        else if(x==1 && y==0)
        {
            return 2;
        }
        else if(x==0 && y==1)
        {
            return 1;
        }
        else
        {
            return 0;
        }
    }
    static int xor(int x,int y)
    {
        if(x==1 && y==1)
        {
            return 0;
        }
        else if(x==1 && y==0)
        {
            return 1;
        }
        else if(x==0 && y==1)
        {
            return 1;
        }
        else
        {
            return 0;
        }
    }
}