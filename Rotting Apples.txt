https://workat.tech/problem-solving/practice/rotting-apples
Rotting Apples
You are given an n * m grid where each position can contain one of the three values:


Cell Value	Represents
0	Empty Cell
1	Fresh Apple
2	Rotten Apple
Every day, all fresh apples which are adjacent to any rotten apple become rotten.


Two cells are adjacent if they have a common edge, i.e., each cell can have upto four adjacent cells.


Find the minimum number of days required for all the apples to be rotten. If this is not possible return -1


class Solution {
	int getDaysToRot(int[][] grid) {
	    // add your logic here
		int n=grid.length;
		int m=grid[0].length;
		return daysCount(grid,n,m,2);
	}
	boolean isSafe(int i,int j,int n,int m){
		if(i>=0 && i<n && j>=0 && j<m){
			return true;
		}
		return false;
	}
	int daysCount(int[][] grid,int n,int m,int x){
		boolean flag=false;
		for(int i=0;i<n;i++){
			for(int j=0;j<m;j++){
				if(grid[i][j]==x){
					if(isSafe(i,j+1,n,m) && grid[i][j+1]==1){
						grid[i][j+1]=x+1;
						flag=true;
					}
					if(isSafe(i,j-1,n,m) && grid[i][j-1]==1){
						grid[i][j-1]=x+1;
						flag=true;
					}
					if(isSafe(i+1,j,n,m) && grid[i+1][j]==1){
						grid[i+1][j]=x+1;
						flag=true;
					}
					if(isSafe(i-1,j,n,m) && grid[i-1][j]==1){
						grid[i-1][j]=x+1;
						flag=true;
					}
				}
			}
		}
		if(!flag){
			for(int i=0;i<n;i++){
				for(int j=0;j<m;j++){
					if(grid[i][j]==1){
						return -1;
					}
				}
			}
			return 0;
		}
		int in=daysCount(grid,n,m,x+1);
		if(in==-1){
			return -1;
		}
		return 1+in;
	}
}
